module.exports =
	/*
	 * Generated by PEG.js 0.10.0.
	 *
	 * http://pegjs.org/
	 */
	(function() {
		"use strict";

		function peg$subclass(child, parent) {
			function ctor() {
				this.constructor = child;
			}
			ctor.prototype = parent.prototype;
			child.prototype = new ctor();
		}

		function peg$SyntaxError(message, expected, found, location) {
			this.message = message;
			this.expected = expected;
			this.found = found;
			this.location = location;
			this.name = "SyntaxError";

			if (typeof Error.captureStackTrace === "function") {
				Error.captureStackTrace(this, peg$SyntaxError);
			}
		}

		peg$subclass(peg$SyntaxError, Error);

		peg$SyntaxError.buildMessage = function(expected, found) {
			var DESCRIBE_EXPECTATION_FNS = {
				literal: function(expectation) {
					return "\"" + literalEscape(expectation.text) + "\"";
				},

				"class": function(expectation) {
					var escapedParts = "",
						i;

					for (i = 0; i < expectation.parts.length; i++) {
						escapedParts += expectation.parts[i] instanceof Array ?
							classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1]) :
							classEscape(expectation.parts[i]);
					}

					return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
				},

				any: function(expectation) {
					return "any character";
				},

				end: function(expectation) {
					return "end of input";
				},

				other: function(expectation) {
					return expectation.description;
				}
			};

			function hex(ch) {
				return ch.charCodeAt(0).toString(16).toUpperCase();
			}

			function literalEscape(s) {
				return s
					.replace(/\\/g, '\\\\')
					.replace(/"/g, '\\"')
					.replace(/\0/g, '\\0')
					.replace(/\t/g, '\\t')
					.replace(/\n/g, '\\n')
					.replace(/\r/g, '\\r')
					.replace(/[\x00-\x0F]/g, function(ch) {
						return '\\x0' + hex(ch);
					})
					.replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
						return '\\x' + hex(ch);
					});
			}

			function classEscape(s) {
				return s
					.replace(/\\/g, '\\\\')
					.replace(/\]/g, '\\]')
					.replace(/\^/g, '\\^')
					.replace(/-/g, '\\-')
					.replace(/\0/g, '\\0')
					.replace(/\t/g, '\\t')
					.replace(/\n/g, '\\n')
					.replace(/\r/g, '\\r')
					.replace(/[\x00-\x0F]/g, function(ch) {
						return '\\x0' + hex(ch);
					})
					.replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
						return '\\x' + hex(ch);
					});
			}

			function describeExpectation(expectation) {
				return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
			}

			function describeExpected(expected) {
				var descriptions = new Array(expected.length),
					i, j;

				for (i = 0; i < expected.length; i++) {
					descriptions[i] = describeExpectation(expected[i]);
				}

				descriptions.sort();

				if (descriptions.length > 0) {
					for (i = 1, j = 1; i < descriptions.length; i++) {
						if (descriptions[i - 1] !== descriptions[i]) {
							descriptions[j] = descriptions[i];
							j++;
						}
					}
					descriptions.length = j;
				}

				switch (descriptions.length) {
					case 1:
						return descriptions[0];

					case 2:
						return descriptions[0] + " or " + descriptions[1];

					default:
						return descriptions.slice(0, -1).join(", ") +
							", or " +
							descriptions[descriptions.length - 1];
				}
			}

			function describeFound(found) {
				return found ? "\"" + literalEscape(found) + "\"" : "end of input";
			}

			return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
		};

		function peg$parse(input, options) {
			options = options !== void 0 ? options : {};

			var peg$FAILED = {},

				peg$startRuleFunctions = {
					FullClass: peg$parseFullClass
				},
				peg$startRuleFunction = peg$parseFullClass,

				peg$c0 = function(terms) {
					return {
						type: 'smali',
						terms: terms.filter(term => term.EMPTY !== null)
					}
				},
				peg$c1 = "class",
				peg$c2 = peg$literalExpectation("class", false),
				peg$c3 = "super",
				peg$c4 = peg$literalExpectation("super", false),
				peg$c5 = "source",
				peg$c6 = peg$literalExpectation("source", false),
				peg$c7 = "registers",
				peg$c8 = peg$literalExpectation("registers", false),
				peg$c9 = "locals",
				peg$c10 = peg$literalExpectation("locals", false),
				peg$c11 = "prologue",
				peg$c12 = peg$literalExpectation("prologue", false),
				peg$c13 = "line",
				peg$c14 = peg$literalExpectation("line", false),
				peg$c15 = "local",
				peg$c16 = peg$literalExpectation("local", false),
				peg$c17 = "\"",
				peg$c18 = peg$literalExpectation("\"", false),
				peg$c19 = /^[^"]/,
				peg$c20 = peg$classExpectation(["\""], true, false),
				peg$c21 = function(value) {
					return {
						type: 'stringLiteral',
						value: value.join('')
					}
				},
				peg$c22 = /^[1-9]/,
				peg$c23 = peg$classExpectation([
					["1", "9"]
				], false, false),
				peg$c24 = /^[0-9]/,
				peg$c25 = peg$classExpectation([
					["0", "9"]
				], false, false),
				peg$c26 = function(value) {
					return {
						type: 'integerLiteral',
						integerBase: 10,
						value: parseInt(value.reduce((a, b) => [...a, ...b]).join(''), 10)
					}
				},
				peg$c27 = "-",
				peg$c28 = peg$literalExpectation("-", false),
				peg$c29 = "0x",
				peg$c30 = peg$literalExpectation("0x", false),
				peg$c31 = /^[0-9a-fA-F]/,
				peg$c32 = peg$classExpectation([
					["0", "9"],
					["a", "f"],
					["A", "F"]
				], false, false),
				peg$c33 = function(minus, value) {
					value = parseInt(value.join(''), 16);
					if (minus)
						value = -value;
					return {
						type: 'integerLiteral',
						integerBase: 16,
						value
					}
				},
				peg$c34 = "null",
				peg$c35 = peg$literalExpectation("null", false),
				peg$c36 = function() {
					return {
						type: 'null'
					}
				},
				peg$c37 = function(vis) {
					return vis.map(v => v[0])
				},
				peg$c38 = ".annotation",
				peg$c39 = peg$literalExpectation(".annotation", false),
				peg$c40 = function(annotationType, annotatorClass) {
					return {
						annotationType,
						annotatorClass
					}
				},
				peg$c41 = ".end",
				peg$c42 = peg$literalExpectation(".end", false),
				peg$c43 = "annotation",
				peg$c44 = peg$literalExpectation("annotation", false),
				peg$c45 = "=",
				peg$c46 = peg$literalExpectation("=", false),
				peg$c47 = function(key, value) {
					return {
						type: 'annotationValue',
						key: key,
						value
					}
				},
				peg$c48 = function(val) {
					return val.map(v => v[0])
				},
				peg$c49 = function(start, values) {
					let res = {
						type: 'annotation',
						values
					}
					Object.assign(res, start);
					return res;
				},
				peg$c50 = "runtime",
				peg$c51 = peg$literalExpectation("runtime", false),
				peg$c52 = "system",
				peg$c53 = peg$literalExpectation("system", false),
				peg$c54 = /^[a-zA-Z_]/,
				peg$c55 = peg$classExpectation([
					["a", "z"],
					["A", "Z"], "_"
				], false, false),
				peg$c56 = function(value) {
					return value.join('')
				},
				peg$c57 = ".field",
				peg$c58 = peg$literalExpectation(".field", false),
				peg$c59 = ":",
				peg$c60 = peg$literalExpectation(":", false),
				peg$c61 = function(visiblity, fieldName) {
					return {
						visiblity,
						fieldName
					}
				},
				peg$c62 = "field",
				peg$c63 = peg$literalExpectation("field", false),
				peg$c64 = function(val) {
					return val.map(v => v[0])
				},
				peg$c65 = function(start, children) {
					let res = {
						type: 'field',
						fieldType: 'undeclared',
						children
					}
					Object.assign(res, start);
					return res;
				},
				peg$c66 = function(start) {
					let res = {
						type: 'field',
						fieldType: 'declared'
					}
					Object.assign(res, start);
					return res;
				},
				peg$c67 = "V",
				peg$c68 = peg$literalExpectation("V", false),
				peg$c69 = function() {
					return {
						type: 'className',
						classType: 'native',
						name: 'void'
					}
				},
				peg$c70 = "I",
				peg$c71 = peg$literalExpectation("I", false),
				peg$c72 = function() {
					return {
						type: 'className',
						classType: 'native',
						name: 'int'
					}
				},
				peg$c73 = "S",
				peg$c74 = peg$literalExpectation("S", false),
				peg$c75 = function() {
					return {
						type: 'className',
						classType: 'native',
						name: 'short'
					}
				},
				peg$c76 = "F",
				peg$c77 = peg$literalExpectation("F", false),
				peg$c78 = function() {
					return {
						type: 'className',
						classType: 'native',
						name: 'float'
					}
				},
				peg$c79 = "Z",
				peg$c80 = peg$literalExpectation("Z", false),
				peg$c81 = function() {
					return {
						type: 'className',
						classType: 'native',
						name: 'boolean'
					}
				},
				peg$c82 = "J",
				peg$c83 = peg$literalExpectation("J", false),
				peg$c84 = function() {
					return {
						type: 'className',
						classType: 'native',
						name: 'long'
					}
				},
				peg$c85 = "D",
				peg$c86 = peg$literalExpectation("D", false),
				peg$c87 = function() {
					return {
						type: 'className',
						classType: 'native',
						name: 'double'
					}
				},
				peg$c88 = "C",
				peg$c89 = peg$literalExpectation("C", false),
				peg$c90 = function() {
					return {
						type: 'className',
						classType: 'native',
						name: 'char'
					}
				},
				peg$c91 = "B",
				peg$c92 = peg$literalExpectation("B", false),
				peg$c93 = function() {
					return {
						type: 'className',
						classType: 'native',
						name: 'byte'
					}
				},
				peg$c94 = "[",
				peg$c95 = peg$literalExpectation("[", false),
				peg$c96 = function(array, type) {
					return {
						type: 'arrayType',
						length: array.length,
						type
					}
				},
				peg$c97 = /^[a-z_0-9]/,
				peg$c98 = peg$classExpectation([
					["a", "z"], "_", ["0", "9"]
				], false, false),
				peg$c99 = function(labelName) {
					return {
						type: 'label',
						labelName: labelName.join('')
					}
				},
				peg$c100 = "p",
				peg$c101 = peg$literalExpectation("p", false),
				peg$c102 = function(id) {
					return {
						type: 'register',
						registerType: 'p',
						id: parseInt(id.join(''), 10)
					}
				},
				peg$c103 = "v",
				peg$c104 = peg$literalExpectation("v", false),
				peg$c105 = function(id) {
					return {
						type: 'register',
						registerType: 'v',
						id: parseInt(id.join(''), 10)
					}
				},
				peg$c106 = "{",
				peg$c107 = peg$literalExpectation("{", false),
				peg$c108 = ",",
				peg$c109 = peg$literalExpectation(",", false),
				peg$c110 = "}",
				peg$c111 = peg$literalExpectation("}", false),
				peg$c112 = function(registers) {
					return {
						type: 'registerList',
						registers: registers.map(e => e[0])
					}
				},
				peg$c113 = function(targetName) {
					return {
						type: 'fieldCallReference',
						targetName
					}
				},
				peg$c114 = function(targetName) {
					return {
						type: 'fieldReferenceReadWrite',
						targetName
					}
				},
				peg$c115 = "->",
				peg$c116 = peg$literalExpectation("->", false),
				peg$c117 = function(targetClass, ref) {
					let res = {
						targetClass
					}
					Object.assign(res, ref);
					return res;
				},
				peg$c118 = function(targetClass, ref) {
					let res = {
						targetClass
					}
					Object.assign(res, ref);
					return res;
				},
				peg$c119 = function(name, variableType) {
					return {
						type: 'localVariableDeclaration',
						name: name,
						variableType
					}
				},
				peg$c120 = function(argumentList) {
					return {
						type: 'methodArgumentList',
						argumentList: argumentList.map(arg => arg[0])
					}
				},
				peg$c121 = /^[a-zA-Z\-\/0-9]/,
				peg$c122 = peg$classExpectation([
					["a", "z"],
					["A", "Z"], "-", "/", ["0", "9"]
				], false, false),
				peg$c123 = function(opName, argumentList) {
					return {
						type: 'methodOperation',
						opName: opName.join(''),
						argumentList
					}
				},
				peg$c124 = "<",
				peg$c125 = peg$literalExpectation("<", false),
				peg$c126 = ">",
				peg$c127 = peg$literalExpectation(">", false),
				peg$c128 = "(",
				peg$c129 = peg$literalExpectation("(", false),
				peg$c130 = ")",
				peg$c131 = peg$literalExpectation(")", false),
				peg$c132 = function(isInternal, name, argumentList, returnType) {
					return {
						name: name.join(''),
						internal: isInternal === null ? false : true,
						argumentList,
						returnType
					}
				},
				peg$c133 = ".method",
				peg$c134 = peg$literalExpectation(".method", false),
				peg$c135 = function(visiblity, name) {
					return {
						visiblity,
						name
					}
				},
				peg$c136 = "method",
				peg$c137 = peg$literalExpectation("method", false),
				peg$c138 = function(start, body) {
					let res = {
						type: 'method',
						body: body.map(e => e[0])
					}
					Object.assign(res, start);
					return res
				},
				peg$c139 = "#",
				peg$c140 = peg$literalExpectation("#", false),
				peg$c141 = /^[^\n]/,
				peg$c142 = peg$classExpectation(["\n"], true, false),
				peg$c143 = function(text) {
					return {
						type: 'comment',
						value: text.join('').trim()
					}
				},
				peg$c144 = ".",
				peg$c145 = peg$literalExpectation(".", false),
				peg$c146 = function(directiveType, visiblity, args) {
					return {
						type: "directive",
						directiveType,
						args,
						visiblity
					}
				},
				peg$c147 = "L",
				peg$c148 = peg$literalExpectation("L", false),
				peg$c149 = /^[a-zA-Z\/_\u0430-\u044F\u0410-\u042F]/,
				peg$c150 = peg$classExpectation([
					["a", "z"],
					["A", "Z"], "/", "_", ["а", "я"],
					["А", "Я"]
				], false, false),
				peg$c151 = ";",
				peg$c152 = peg$literalExpectation(";", false),
				peg$c153 = function(name) {
					return {
						type: 'className',
						classType: 'object',
						name: name.join('')
					}
				},
				peg$c154 = "public",
				peg$c155 = peg$literalExpectation("public", false),
				peg$c156 = function() {
					return text()
				},
				peg$c157 = "private",
				peg$c158 = peg$literalExpectation("private", false),
				peg$c159 = "protected",
				peg$c160 = peg$literalExpectation("protected", false),
				peg$c161 = "abstract",
				peg$c162 = peg$literalExpectation("abstract", false),
				peg$c163 = "static",
				peg$c164 = peg$literalExpectation("static", false),
				peg$c165 = "constructor",
				peg$c166 = peg$literalExpectation("constructor", false),
				peg$c167 = "final",
				peg$c168 = peg$literalExpectation("final", false),
				peg$c169 = "native",
				peg$c170 = peg$literalExpectation("native", false),
				peg$c171 = "bridge",
				peg$c172 = peg$literalExpectation("bridge", false),
				peg$c173 = "synthetic",
				peg$c174 = peg$literalExpectation("synthetic", false),
				peg$c175 = "varargs",
				peg$c176 = peg$literalExpectation("varargs", false),
				peg$c177 = "declared-synchronized",
				peg$c178 = peg$literalExpectation("declared-synchronized", false),
				peg$c179 = /^[ \t\n\r]/,
				peg$c180 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false),
				peg$c181 = function() {
					return {
						'EMPTY': null
					}
				},

				peg$currPos = 0,
				peg$savedPos = 0,
				peg$posDetailsCache = [{
					line: 1,
					column: 1
				}],
				peg$maxFailPos = 0,
				peg$maxFailExpected = [],
				peg$silentFails = 0,

				peg$result;

			if ("startRule" in options) {
				if (!(options.startRule in peg$startRuleFunctions)) {
					throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
				}

				peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
			}

			function text() {
				return input.substring(peg$savedPos, peg$currPos);
			}

			function location() {
				return peg$computeLocation(peg$savedPos, peg$currPos);
			}

			function expected(description, location) {
				location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

				throw peg$buildStructuredError(
					[peg$otherExpectation(description)],
					input.substring(peg$savedPos, peg$currPos),
					location
				);
			}

			function error(message, location) {
				location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

				throw peg$buildSimpleError(message, location);
			}

			function peg$literalExpectation(text, ignoreCase) {
				return {
					type: "literal",
					text: text,
					ignoreCase: ignoreCase
				};
			}

			function peg$classExpectation(parts, inverted, ignoreCase) {
				return {
					type: "class",
					parts: parts,
					inverted: inverted,
					ignoreCase: ignoreCase
				};
			}

			function peg$anyExpectation() {
				return {
					type: "any"
				};
			}

			function peg$endExpectation() {
				return {
					type: "end"
				};
			}

			function peg$otherExpectation(description) {
				return {
					type: "other",
					description: description
				};
			}

			function peg$computePosDetails(pos) {
				var details = peg$posDetailsCache[pos],
					p;

				if (details) {
					return details;
				}
				else {
					p = pos - 1;
					while (!peg$posDetailsCache[p]) {
						p--;
					}

					details = peg$posDetailsCache[p];
					details = {
						line: details.line,
						column: details.column
					};

					while (p < pos) {
						if (input.charCodeAt(p) === 10) {
							details.line++;
							details.column = 1;
						}
						else {
							details.column++;
						}

						p++;
					}

					peg$posDetailsCache[pos] = details;
					return details;
				}
			}

			function peg$computeLocation(startPos, endPos) {
				var startPosDetails = peg$computePosDetails(startPos),
					endPosDetails = peg$computePosDetails(endPos);

				return {
					start: {
						offset: startPos,
						line: startPosDetails.line,
						column: startPosDetails.column
					},
					end: {
						offset: endPos,
						line: endPosDetails.line,
						column: endPosDetails.column
					}
				};
			}

			function peg$fail(expected) {
				if (peg$currPos < peg$maxFailPos) {
					return;
				}

				if (peg$currPos > peg$maxFailPos) {
					peg$maxFailPos = peg$currPos;
					peg$maxFailExpected = [];
				}

				peg$maxFailExpected.push(expected);
			}

			function peg$buildSimpleError(message, location) {
				return new peg$SyntaxError(message, null, null, location);
			}

			function peg$buildStructuredError(expected, found, location) {
				return new peg$SyntaxError(
					peg$SyntaxError.buildMessage(expected, found),
					expected,
					found,
					location
				);
			}

			function peg$parseFullClass() {
				var s0, s1, s2;

				s0 = peg$currPos;
				s1 = [];
				s2 = peg$parseClassTerm();
				while (s2 !== peg$FAILED) {
					s1.push(s2);
					s2 = peg$parseClassTerm();
				}
				if (s1 !== peg$FAILED) {
					peg$savedPos = s0;
					s1 = peg$c0(s1);
				}
				s0 = s1;

				return s0;
			}

			function peg$parseClassTerm() {
				var s0;

				s0 = peg$parseTerm();
				if (s0 === peg$FAILED) {
					s0 = peg$parseAnnotation();
				}

				return s0;
			}

			function peg$parseTerm() {
				var s0;

				s0 = peg$parseDirective();
				if (s0 === peg$FAILED) {
					s0 = peg$parseComment();
					if (s0 === peg$FAILED) {
						s0 = peg$parse_();
					}
				}

				return s0;
			}

			function peg$parseDeclaration() {
				var s0;

				if (input.substr(peg$currPos, 5) === peg$c1) {
					s0 = peg$c1;
					peg$currPos += 5;
				}
				else {
					s0 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c2);
					}
				}
				if (s0 === peg$FAILED) {
					if (input.substr(peg$currPos, 5) === peg$c3) {
						s0 = peg$c3;
						peg$currPos += 5;
					}
					else {
						s0 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c4);
						}
					}
					if (s0 === peg$FAILED) {
						if (input.substr(peg$currPos, 6) === peg$c5) {
							s0 = peg$c5;
							peg$currPos += 6;
						}
						else {
							s0 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$c6);
							}
						}
						if (s0 === peg$FAILED) {
							if (input.substr(peg$currPos, 9) === peg$c7) {
								s0 = peg$c7;
								peg$currPos += 9;
							}
							else {
								s0 = peg$FAILED;
								if (peg$silentFails === 0) {
									peg$fail(peg$c8);
								}
							}
							if (s0 === peg$FAILED) {
								if (input.substr(peg$currPos, 6) === peg$c9) {
									s0 = peg$c9;
									peg$currPos += 6;
								}
								else {
									s0 = peg$FAILED;
									if (peg$silentFails === 0) {
										peg$fail(peg$c10);
									}
								}
								if (s0 === peg$FAILED) {
									if (input.substr(peg$currPos, 8) === peg$c11) {
										s0 = peg$c11;
										peg$currPos += 8;
									}
									else {
										s0 = peg$FAILED;
										if (peg$silentFails === 0) {
											peg$fail(peg$c12);
										}
									}
									if (s0 === peg$FAILED) {
										if (input.substr(peg$currPos, 4) === peg$c13) {
											s0 = peg$c13;
											peg$currPos += 4;
										}
										else {
											s0 = peg$FAILED;
											if (peg$silentFails === 0) {
												peg$fail(peg$c14);
											}
										}
										if (s0 === peg$FAILED) {
											if (input.substr(peg$currPos, 5) === peg$c15) {
												s0 = peg$c15;
												peg$currPos += 5;
											}
											else {
												s0 = peg$FAILED;
												if (peg$silentFails === 0) {
													peg$fail(peg$c16);
												}
											}
										}
									}
								}
							}
						}
					}
				}

				return s0;
			}

			function peg$parseString() {
				var s0, s1, s2, s3;

				s0 = peg$currPos;
				if (input.charCodeAt(peg$currPos) === 34) {
					s1 = peg$c17;
					peg$currPos++;
				}
				else {
					s1 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c18);
					}
				}
				if (s1 !== peg$FAILED) {
					s2 = [];
					if (peg$c19.test(input.charAt(peg$currPos))) {
						s3 = input.charAt(peg$currPos);
						peg$currPos++;
					}
					else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c20);
						}
					}
					if (s3 !== peg$FAILED) {
						while (s3 !== peg$FAILED) {
							s2.push(s3);
							if (peg$c19.test(input.charAt(peg$currPos))) {
								s3 = input.charAt(peg$currPos);
								peg$currPos++;
							}
							else {
								s3 = peg$FAILED;
								if (peg$silentFails === 0) {
									peg$fail(peg$c20);
								}
							}
						}
					}
					else {
						s2 = peg$FAILED;
					}
					if (s2 !== peg$FAILED) {
						if (input.charCodeAt(peg$currPos) === 34) {
							s3 = peg$c17;
							peg$currPos++;
						}
						else {
							s3 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$c18);
							}
						}
						if (s3 !== peg$FAILED) {
							peg$savedPos = s0;
							s1 = peg$c21(s2);
							s0 = s1;
						}
						else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					}
					else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				}
				else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}

				return s0;
			}

			function peg$parseInteger() {
				var s0, s1, s2, s3, s4;

				s0 = peg$currPos;
				s1 = peg$currPos;
				s2 = [];
				if (peg$c22.test(input.charAt(peg$currPos))) {
					s3 = input.charAt(peg$currPos);
					peg$currPos++;
				}
				else {
					s3 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c23);
					}
				}
				if (s3 !== peg$FAILED) {
					while (s3 !== peg$FAILED) {
						s2.push(s3);
						if (peg$c22.test(input.charAt(peg$currPos))) {
							s3 = input.charAt(peg$currPos);
							peg$currPos++;
						}
						else {
							s3 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$c23);
							}
						}
					}
				}
				else {
					s2 = peg$FAILED;
				}
				if (s2 !== peg$FAILED) {
					s3 = [];
					if (peg$c24.test(input.charAt(peg$currPos))) {
						s4 = input.charAt(peg$currPos);
						peg$currPos++;
					}
					else {
						s4 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c25);
						}
					}
					while (s4 !== peg$FAILED) {
						s3.push(s4);
						if (peg$c24.test(input.charAt(peg$currPos))) {
							s4 = input.charAt(peg$currPos);
							peg$currPos++;
						}
						else {
							s4 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$c25);
							}
						}
					}
					if (s3 !== peg$FAILED) {
						s2 = [s2, s3];
						s1 = s2;
					}
					else {
						peg$currPos = s1;
						s1 = peg$FAILED;
					}
				}
				else {
					peg$currPos = s1;
					s1 = peg$FAILED;
				}
				if (s1 !== peg$FAILED) {
					peg$savedPos = s0;
					s1 = peg$c26(s1);
				}
				s0 = s1;
				if (s0 === peg$FAILED) {
					s0 = peg$currPos;
					if (input.charCodeAt(peg$currPos) === 45) {
						s1 = peg$c27;
						peg$currPos++;
					}
					else {
						s1 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c28);
						}
					}
					if (s1 === peg$FAILED) {
						s1 = null;
					}
					if (s1 !== peg$FAILED) {
						if (input.substr(peg$currPos, 2) === peg$c29) {
							s2 = peg$c29;
							peg$currPos += 2;
						}
						else {
							s2 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$c30);
							}
						}
						if (s2 !== peg$FAILED) {
							s3 = [];
							if (peg$c31.test(input.charAt(peg$currPos))) {
								s4 = input.charAt(peg$currPos);
								peg$currPos++;
							}
							else {
								s4 = peg$FAILED;
								if (peg$silentFails === 0) {
									peg$fail(peg$c32);
								}
							}
							if (s4 !== peg$FAILED) {
								while (s4 !== peg$FAILED) {
									s3.push(s4);
									if (peg$c31.test(input.charAt(peg$currPos))) {
										s4 = input.charAt(peg$currPos);
										peg$currPos++;
									}
									else {
										s4 = peg$FAILED;
										if (peg$silentFails === 0) {
											peg$fail(peg$c32);
										}
									}
								}
							}
							else {
								s3 = peg$FAILED;
							}
							if (s3 !== peg$FAILED) {
								peg$savedPos = s0;
								s1 = peg$c33(s1, s3);
								s0 = s1;
							}
							else {
								peg$currPos = s0;
								s0 = peg$FAILED;
							}
						}
						else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					}
					else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				}

				return s0;
			}

			function peg$parseNull() {
				var s0, s1;

				s0 = peg$currPos;
				if (input.substr(peg$currPos, 4) === peg$c34) {
					s1 = peg$c34;
					peg$currPos += 4;
				}
				else {
					s1 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c35);
					}
				}
				if (s1 !== peg$FAILED) {
					peg$savedPos = s0;
					s1 = peg$c36();
				}
				s0 = s1;

				return s0;
			}

			function peg$parsePart() {
				var s0;

				s0 = peg$parseLocalVariableDeclaration();
				if (s0 === peg$FAILED) {
					s0 = peg$parseClass();
					if (s0 === peg$FAILED) {
						s0 = peg$parseString();
						if (s0 === peg$FAILED) {
							s0 = peg$parseInteger();
							if (s0 === peg$FAILED) {
								s0 = peg$parseNull();
							}
						}
					}
				}

				return s0;
			}

			function peg$parsePartList() {
				var s0, s1, s2, s3, s4, s5;

				s0 = peg$currPos;
				s1 = [];
				s2 = peg$currPos;
				s3 = peg$parsePart();
				if (s3 !== peg$FAILED) {
					s4 = [];
					s5 = peg$parse_();
					while (s5 !== peg$FAILED) {
						s4.push(s5);
						s5 = peg$parse_();
					}
					if (s4 !== peg$FAILED) {
						s3 = [s3, s4];
						s2 = s3;
					}
					else {
						peg$currPos = s2;
						s2 = peg$FAILED;
					}
				}
				else {
					peg$currPos = s2;
					s2 = peg$FAILED;
				}
				while (s2 !== peg$FAILED) {
					s1.push(s2);
					s2 = peg$currPos;
					s3 = peg$parsePart();
					if (s3 !== peg$FAILED) {
						s4 = [];
						s5 = peg$parse_();
						while (s5 !== peg$FAILED) {
							s4.push(s5);
							s5 = peg$parse_();
						}
						if (s4 !== peg$FAILED) {
							s3 = [s3, s4];
							s2 = s3;
						}
						else {
							peg$currPos = s2;
							s2 = peg$FAILED;
						}
					}
					else {
						peg$currPos = s2;
						s2 = peg$FAILED;
					}
				}
				if (s1 !== peg$FAILED) {
					peg$savedPos = s0;
					s1 = peg$c37(s1);
				}
				s0 = s1;

				return s0;
			}

			function peg$parseAnnotationStart() {
				var s0, s1, s2, s3, s4, s5;

				s0 = peg$currPos;
				if (input.substr(peg$currPos, 11) === peg$c38) {
					s1 = peg$c38;
					peg$currPos += 11;
				}
				else {
					s1 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c39);
					}
				}
				if (s1 !== peg$FAILED) {
					s2 = peg$parse_();
					if (s2 !== peg$FAILED) {
						s3 = peg$parseAnnotationType();
						if (s3 !== peg$FAILED) {
							s4 = peg$parse_();
							if (s4 !== peg$FAILED) {
								s5 = peg$parseClass();
								if (s5 !== peg$FAILED) {
									peg$savedPos = s0;
									s1 = peg$c40(s3, s5);
									s0 = s1;
								}
								else {
									peg$currPos = s0;
									s0 = peg$FAILED;
								}
							}
							else {
								peg$currPos = s0;
								s0 = peg$FAILED;
							}
						}
						else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					}
					else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				}
				else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}

				return s0;
			}

			function peg$parseAnnotationEnd() {
				var s0, s1, s2, s3;

				s0 = peg$currPos;
				if (input.substr(peg$currPos, 4) === peg$c41) {
					s1 = peg$c41;
					peg$currPos += 4;
				}
				else {
					s1 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c42);
					}
				}
				if (s1 !== peg$FAILED) {
					s2 = peg$parse_();
					if (s2 !== peg$FAILED) {
						if (input.substr(peg$currPos, 10) === peg$c43) {
							s3 = peg$c43;
							peg$currPos += 10;
						}
						else {
							s3 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$c44);
							}
						}
						if (s3 !== peg$FAILED) {
							s1 = [s1, s2, s3];
							s0 = s1;
						}
						else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					}
					else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				}
				else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}

				return s0;
			}

			function peg$parseAnnotationValue() {
				var s0, s1, s2, s3, s4, s5;

				s0 = peg$currPos;
				s1 = peg$parseFieldName();
				if (s1 !== peg$FAILED) {
					s2 = peg$parse_();
					if (s2 !== peg$FAILED) {
						if (input.charCodeAt(peg$currPos) === 61) {
							s3 = peg$c45;
							peg$currPos++;
						}
						else {
							s3 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$c46);
							}
						}
						if (s3 !== peg$FAILED) {
							s4 = peg$parse_();
							if (s4 !== peg$FAILED) {
								s5 = peg$parsePart();
								if (s5 !== peg$FAILED) {
									peg$savedPos = s0;
									s1 = peg$c47(s1, s5);
									s0 = s1;
								}
								else {
									peg$currPos = s0;
									s0 = peg$FAILED;
								}
							}
							else {
								peg$currPos = s0;
								s0 = peg$FAILED;
							}
						}
						else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					}
					else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				}
				else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}

				return s0;
			}

			function peg$parseAnnotationValueList() {
				var s0, s1, s2, s3, s4, s5;

				s0 = peg$currPos;
				s1 = [];
				s2 = peg$currPos;
				s3 = peg$parseAnnotationValue();
				if (s3 !== peg$FAILED) {
					s4 = [];
					s5 = peg$parse_();
					while (s5 !== peg$FAILED) {
						s4.push(s5);
						s5 = peg$parse_();
					}
					if (s4 !== peg$FAILED) {
						s3 = [s3, s4];
						s2 = s3;
					}
					else {
						peg$currPos = s2;
						s2 = peg$FAILED;
					}
				}
				else {
					peg$currPos = s2;
					s2 = peg$FAILED;
				}
				while (s2 !== peg$FAILED) {
					s1.push(s2);
					s2 = peg$currPos;
					s3 = peg$parseAnnotationValue();
					if (s3 !== peg$FAILED) {
						s4 = [];
						s5 = peg$parse_();
						while (s5 !== peg$FAILED) {
							s4.push(s5);
							s5 = peg$parse_();
						}
						if (s4 !== peg$FAILED) {
							s3 = [s3, s4];
							s2 = s3;
						}
						else {
							peg$currPos = s2;
							s2 = peg$FAILED;
						}
					}
					else {
						peg$currPos = s2;
						s2 = peg$FAILED;
					}
				}
				if (s1 !== peg$FAILED) {
					peg$savedPos = s0;
					s1 = peg$c48(s1);
				}
				s0 = s1;

				return s0;
			}

			function peg$parseAnnotation() {
				var s0, s1, s2, s3, s4;

				s0 = peg$currPos;
				s1 = peg$parseAnnotationStart();
				if (s1 !== peg$FAILED) {
					s2 = [];
					s3 = peg$parse_();
					if (s3 !== peg$FAILED) {
						while (s3 !== peg$FAILED) {
							s2.push(s3);
							s3 = peg$parse_();
						}
					}
					else {
						s2 = peg$FAILED;
					}
					if (s2 !== peg$FAILED) {
						s3 = peg$parseAnnotationValueList();
						if (s3 !== peg$FAILED) {
							s4 = peg$parseAnnotationEnd();
							if (s4 !== peg$FAILED) {
								peg$savedPos = s0;
								s1 = peg$c49(s1, s3);
								s0 = s1;
							}
							else {
								peg$currPos = s0;
								s0 = peg$FAILED;
							}
						}
						else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					}
					else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				}
				else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}

				return s0;
			}

			function peg$parseAnnotationType() {
				var s0;

				if (input.substr(peg$currPos, 7) === peg$c50) {
					s0 = peg$c50;
					peg$currPos += 7;
				}
				else {
					s0 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c51);
					}
				}
				if (s0 === peg$FAILED) {
					if (input.substr(peg$currPos, 6) === peg$c52) {
						s0 = peg$c52;
						peg$currPos += 6;
					}
					else {
						s0 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c53);
						}
					}
				}

				return s0;
			}

			function peg$parseFieldName() {
				var s0, s1, s2;

				s0 = peg$currPos;
				s1 = [];
				if (peg$c54.test(input.charAt(peg$currPos))) {
					s2 = input.charAt(peg$currPos);
					peg$currPos++;
				}
				else {
					s2 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c55);
					}
				}
				if (s2 !== peg$FAILED) {
					while (s2 !== peg$FAILED) {
						s1.push(s2);
						if (peg$c54.test(input.charAt(peg$currPos))) {
							s2 = input.charAt(peg$currPos);
							peg$currPos++;
						}
						else {
							s2 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$c55);
							}
						}
					}
				}
				else {
					s1 = peg$FAILED;
				}
				if (s1 !== peg$FAILED) {
					peg$savedPos = s0;
					s1 = peg$c56(s1);
				}
				s0 = s1;

				return s0;
			}

			function peg$parseFieldStart() {
				var s0, s1, s2, s3, s4, s5, s6;

				s0 = peg$currPos;
				if (input.substr(peg$currPos, 6) === peg$c57) {
					s1 = peg$c57;
					peg$currPos += 6;
				}
				else {
					s1 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c58);
					}
				}
				if (s1 !== peg$FAILED) {
					s2 = peg$parse_();
					if (s2 !== peg$FAILED) {
						s3 = peg$parseVisiblityList();
						if (s3 !== peg$FAILED) {
							s4 = peg$parseFieldName();
							if (s4 !== peg$FAILED) {
								if (input.charCodeAt(peg$currPos) === 58) {
									s5 = peg$c59;
									peg$currPos++;
								}
								else {
									s5 = peg$FAILED;
									if (peg$silentFails === 0) {
										peg$fail(peg$c60);
									}
								}
								if (s5 !== peg$FAILED) {
									s6 = peg$parseType();
									if (s6 !== peg$FAILED) {
										peg$savedPos = s0;
										s1 = peg$c61(s3, s4);
										s0 = s1;
									}
									else {
										peg$currPos = s0;
										s0 = peg$FAILED;
									}
								}
								else {
									peg$currPos = s0;
									s0 = peg$FAILED;
								}
							}
							else {
								peg$currPos = s0;
								s0 = peg$FAILED;
							}
						}
						else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					}
					else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				}
				else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}

				return s0;
			}

			function peg$parseFieldEnd() {
				var s0, s1, s2, s3;

				s0 = peg$currPos;
				if (input.substr(peg$currPos, 4) === peg$c41) {
					s1 = peg$c41;
					peg$currPos += 4;
				}
				else {
					s1 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c42);
					}
				}
				if (s1 !== peg$FAILED) {
					s2 = peg$parse_();
					if (s2 !== peg$FAILED) {
						if (input.substr(peg$currPos, 5) === peg$c62) {
							s3 = peg$c62;
							peg$currPos += 5;
						}
						else {
							s3 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$c63);
							}
						}
						if (s3 !== peg$FAILED) {
							s1 = [s1, s2, s3];
							s0 = s1;
						}
						else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					}
					else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				}
				else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}

				return s0;
			}

			function peg$parseFieldValueList() {
				var s0, s1, s2, s3, s4, s5;

				s0 = peg$currPos;
				s1 = [];
				s2 = peg$currPos;
				s3 = peg$parseDirective();
				if (s3 !== peg$FAILED) {
					s4 = [];
					s5 = peg$parse_();
					while (s5 !== peg$FAILED) {
						s4.push(s5);
						s5 = peg$parse_();
					}
					if (s4 !== peg$FAILED) {
						s3 = [s3, s4];
						s2 = s3;
					}
					else {
						peg$currPos = s2;
						s2 = peg$FAILED;
					}
				}
				else {
					peg$currPos = s2;
					s2 = peg$FAILED;
				}
				while (s2 !== peg$FAILED) {
					s1.push(s2);
					s2 = peg$currPos;
					s3 = peg$parseDirective();
					if (s3 !== peg$FAILED) {
						s4 = [];
						s5 = peg$parse_();
						while (s5 !== peg$FAILED) {
							s4.push(s5);
							s5 = peg$parse_();
						}
						if (s4 !== peg$FAILED) {
							s3 = [s3, s4];
							s2 = s3;
						}
						else {
							peg$currPos = s2;
							s2 = peg$FAILED;
						}
					}
					else {
						peg$currPos = s2;
						s2 = peg$FAILED;
					}
				}
				if (s1 !== peg$FAILED) {
					peg$savedPos = s0;
					s1 = peg$c64(s1);
				}
				s0 = s1;

				return s0;
			}

			function peg$parseField() {
				var s0, s1, s2, s3, s4, s5;

				s0 = peg$currPos;
				s1 = peg$parseFieldStart();
				if (s1 !== peg$FAILED) {
					s2 = peg$parse_();
					if (s2 !== peg$FAILED) {
						s3 = peg$parseFieldValueList();
						if (s3 !== peg$FAILED) {
							s4 = peg$parseFieldEnd();
							if (s4 !== peg$FAILED) {
								peg$savedPos = s0;
								s1 = peg$c65(s1, s3);
								s0 = s1;
							}
							else {
								peg$currPos = s0;
								s0 = peg$FAILED;
							}
						}
						else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					}
					else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				}
				else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
				if (s0 === peg$FAILED) {
					s0 = peg$currPos;
					s1 = peg$parseFieldStart();
					if (s1 !== peg$FAILED) {
						s2 = peg$parse_();
						if (s2 !== peg$FAILED) {
							if (input.charCodeAt(peg$currPos) === 61) {
								s3 = peg$c45;
								peg$currPos++;
							}
							else {
								s3 = peg$FAILED;
								if (peg$silentFails === 0) {
									peg$fail(peg$c46);
								}
							}
							if (s3 !== peg$FAILED) {
								s4 = peg$parse_();
								if (s4 !== peg$FAILED) {
									s5 = peg$parsePart();
									if (s5 !== peg$FAILED) {
										peg$savedPos = s0;
										s1 = peg$c66(s1);
										s0 = s1;
									}
									else {
										peg$currPos = s0;
										s0 = peg$FAILED;
									}
								}
								else {
									peg$currPos = s0;
									s0 = peg$FAILED;
								}
							}
							else {
								peg$currPos = s0;
								s0 = peg$FAILED;
							}
						}
						else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					}
					else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				}

				return s0;
			}

			function peg$parseType() {
				var s0, s1;

				s0 = peg$currPos;
				if (input.charCodeAt(peg$currPos) === 86) {
					s1 = peg$c67;
					peg$currPos++;
				}
				else {
					s1 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c68);
					}
				}
				if (s1 !== peg$FAILED) {
					peg$savedPos = s0;
					s1 = peg$c69();
				}
				s0 = s1;
				if (s0 === peg$FAILED) {
					s0 = peg$currPos;
					if (input.charCodeAt(peg$currPos) === 73) {
						s1 = peg$c70;
						peg$currPos++;
					}
					else {
						s1 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c71);
						}
					}
					if (s1 !== peg$FAILED) {
						peg$savedPos = s0;
						s1 = peg$c72();
					}
					s0 = s1;
					if (s0 === peg$FAILED) {
						s0 = peg$currPos;
						if (input.charCodeAt(peg$currPos) === 83) {
							s1 = peg$c73;
							peg$currPos++;
						}
						else {
							s1 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$c74);
							}
						}
						if (s1 !== peg$FAILED) {
							peg$savedPos = s0;
							s1 = peg$c75();
						}
						s0 = s1;
						if (s0 === peg$FAILED) {
							s0 = peg$currPos;
							if (input.charCodeAt(peg$currPos) === 70) {
								s1 = peg$c76;
								peg$currPos++;
							}
							else {
								s1 = peg$FAILED;
								if (peg$silentFails === 0) {
									peg$fail(peg$c77);
								}
							}
							if (s1 !== peg$FAILED) {
								peg$savedPos = s0;
								s1 = peg$c78();
							}
							s0 = s1;
							if (s0 === peg$FAILED) {
								s0 = peg$currPos;
								if (input.charCodeAt(peg$currPos) === 90) {
									s1 = peg$c79;
									peg$currPos++;
								}
								else {
									s1 = peg$FAILED;
									if (peg$silentFails === 0) {
										peg$fail(peg$c80);
									}
								}
								if (s1 !== peg$FAILED) {
									peg$savedPos = s0;
									s1 = peg$c81();
								}
								s0 = s1;
								if (s0 === peg$FAILED) {
									s0 = peg$currPos;
									if (input.charCodeAt(peg$currPos) === 74) {
										s1 = peg$c82;
										peg$currPos++;
									}
									else {
										s1 = peg$FAILED;
										if (peg$silentFails === 0) {
											peg$fail(peg$c83);
										}
									}
									if (s1 !== peg$FAILED) {
										peg$savedPos = s0;
										s1 = peg$c84();
									}
									s0 = s1;
									if (s0 === peg$FAILED) {
										s0 = peg$currPos;
										if (input.charCodeAt(peg$currPos) === 68) {
											s1 = peg$c85;
											peg$currPos++;
										}
										else {
											s1 = peg$FAILED;
											if (peg$silentFails === 0) {
												peg$fail(peg$c86);
											}
										}
										if (s1 !== peg$FAILED) {
											peg$savedPos = s0;
											s1 = peg$c87();
										}
										s0 = s1;
										if (s0 === peg$FAILED) {
											s0 = peg$currPos;
											if (input.charCodeAt(peg$currPos) === 67) {
												s1 = peg$c88;
												peg$currPos++;
											}
											else {
												s1 = peg$FAILED;
												if (peg$silentFails === 0) {
													peg$fail(peg$c89);
												}
											}
											if (s1 !== peg$FAILED) {
												peg$savedPos = s0;
												s1 = peg$c90();
											}
											s0 = s1;
											if (s0 === peg$FAILED) {
												s0 = peg$currPos;
												if (input.charCodeAt(peg$currPos) === 66) {
													s1 = peg$c91;
													peg$currPos++;
												}
												else {
													s1 = peg$FAILED;
													if (peg$silentFails === 0) {
														peg$fail(peg$c92);
													}
												}
												if (s1 !== peg$FAILED) {
													peg$savedPos = s0;
													s1 = peg$c93();
												}
												s0 = s1;
												if (s0 === peg$FAILED) {
													s0 = peg$parseClass();
												}
											}
										}
									}
								}
							}
						}
					}
				}

				return s0;
			}

			function peg$parseArrayType() {
				var s0, s1, s2;

				s0 = peg$currPos;
				s1 = [];
				if (input.charCodeAt(peg$currPos) === 91) {
					s2 = peg$c94;
					peg$currPos++;
				}
				else {
					s2 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c95);
					}
				}
				while (s2 !== peg$FAILED) {
					s1.push(s2);
					if (input.charCodeAt(peg$currPos) === 91) {
						s2 = peg$c94;
						peg$currPos++;
					}
					else {
						s2 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c95);
						}
					}
				}
				if (s1 !== peg$FAILED) {
					s2 = peg$parseType();
					if (s2 !== peg$FAILED) {
						peg$savedPos = s0;
						s1 = peg$c96(s1, s2);
						s0 = s1;
					}
					else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				}
				else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}

				return s0;
			}

			function peg$parseLabel() {
				var s0, s1, s2, s3;

				s0 = peg$currPos;
				if (input.charCodeAt(peg$currPos) === 58) {
					s1 = peg$c59;
					peg$currPos++;
				}
				else {
					s1 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c60);
					}
				}
				if (s1 !== peg$FAILED) {
					s2 = [];
					if (peg$c97.test(input.charAt(peg$currPos))) {
						s3 = input.charAt(peg$currPos);
						peg$currPos++;
					}
					else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c98);
						}
					}
					if (s3 !== peg$FAILED) {
						while (s3 !== peg$FAILED) {
							s2.push(s3);
							if (peg$c97.test(input.charAt(peg$currPos))) {
								s3 = input.charAt(peg$currPos);
								peg$currPos++;
							}
							else {
								s3 = peg$FAILED;
								if (peg$silentFails === 0) {
									peg$fail(peg$c98);
								}
							}
						}
					}
					else {
						s2 = peg$FAILED;
					}
					if (s2 !== peg$FAILED) {
						peg$savedPos = s0;
						s1 = peg$c99(s2);
						s0 = s1;
					}
					else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				}
				else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}

				return s0;
			}

			function peg$parseRegister() {
				var s0, s1, s2, s3;

				s0 = peg$currPos;
				if (input.charCodeAt(peg$currPos) === 112) {
					s1 = peg$c100;
					peg$currPos++;
				}
				else {
					s1 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c101);
					}
				}
				if (s1 !== peg$FAILED) {
					s2 = [];
					if (peg$c24.test(input.charAt(peg$currPos))) {
						s3 = input.charAt(peg$currPos);
						peg$currPos++;
					}
					else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c25);
						}
					}
					if (s3 !== peg$FAILED) {
						while (s3 !== peg$FAILED) {
							s2.push(s3);
							if (peg$c24.test(input.charAt(peg$currPos))) {
								s3 = input.charAt(peg$currPos);
								peg$currPos++;
							}
							else {
								s3 = peg$FAILED;
								if (peg$silentFails === 0) {
									peg$fail(peg$c25);
								}
							}
						}
					}
					else {
						s2 = peg$FAILED;
					}
					if (s2 !== peg$FAILED) {
						peg$savedPos = s0;
						s1 = peg$c102(s2);
						s0 = s1;
					}
					else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				}
				else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
				if (s0 === peg$FAILED) {
					s0 = peg$currPos;
					if (input.charCodeAt(peg$currPos) === 118) {
						s1 = peg$c103;
						peg$currPos++;
					}
					else {
						s1 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c104);
						}
					}
					if (s1 !== peg$FAILED) {
						s2 = [];
						if (peg$c24.test(input.charAt(peg$currPos))) {
							s3 = input.charAt(peg$currPos);
							peg$currPos++;
						}
						else {
							s3 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$c25);
							}
						}
						if (s3 !== peg$FAILED) {
							while (s3 !== peg$FAILED) {
								s2.push(s3);
								if (peg$c24.test(input.charAt(peg$currPos))) {
									s3 = input.charAt(peg$currPos);
									peg$currPos++;
								}
								else {
									s3 = peg$FAILED;
									if (peg$silentFails === 0) {
										peg$fail(peg$c25);
									}
								}
							}
						}
						else {
							s2 = peg$FAILED;
						}
						if (s2 !== peg$FAILED) {
							peg$savedPos = s0;
							s1 = peg$c105(s2);
							s0 = s1;
						}
						else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					}
					else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				}

				return s0;
			}

			function peg$parseRegisterList() {
				var s0, s1, s2, s3, s4, s5, s6, s7;

				s0 = peg$currPos;
				if (input.charCodeAt(peg$currPos) === 123) {
					s1 = peg$c106;
					peg$currPos++;
				}
				else {
					s1 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c107);
					}
				}
				if (s1 !== peg$FAILED) {
					s2 = [];
					s3 = peg$currPos;
					s4 = peg$parseRegister();
					if (s4 !== peg$FAILED) {
						s5 = peg$currPos;
						if (input.charCodeAt(peg$currPos) === 44) {
							s6 = peg$c108;
							peg$currPos++;
						}
						else {
							s6 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$c109);
							}
						}
						if (s6 !== peg$FAILED) {
							s7 = peg$parse_();
							if (s7 === peg$FAILED) {
								s7 = null;
							}
							if (s7 !== peg$FAILED) {
								s6 = [s6, s7];
								s5 = s6;
							}
							else {
								peg$currPos = s5;
								s5 = peg$FAILED;
							}
						}
						else {
							peg$currPos = s5;
							s5 = peg$FAILED;
						}
						if (s5 === peg$FAILED) {
							s5 = null;
						}
						if (s5 !== peg$FAILED) {
							s4 = [s4, s5];
							s3 = s4;
						}
						else {
							peg$currPos = s3;
							s3 = peg$FAILED;
						}
					}
					else {
						peg$currPos = s3;
						s3 = peg$FAILED;
					}
					while (s3 !== peg$FAILED) {
						s2.push(s3);
						s3 = peg$currPos;
						s4 = peg$parseRegister();
						if (s4 !== peg$FAILED) {
							s5 = peg$currPos;
							if (input.charCodeAt(peg$currPos) === 44) {
								s6 = peg$c108;
								peg$currPos++;
							}
							else {
								s6 = peg$FAILED;
								if (peg$silentFails === 0) {
									peg$fail(peg$c109);
								}
							}
							if (s6 !== peg$FAILED) {
								s7 = peg$parse_();
								if (s7 === peg$FAILED) {
									s7 = null;
								}
								if (s7 !== peg$FAILED) {
									s6 = [s6, s7];
									s5 = s6;
								}
								else {
									peg$currPos = s5;
									s5 = peg$FAILED;
								}
							}
							else {
								peg$currPos = s5;
								s5 = peg$FAILED;
							}
							if (s5 === peg$FAILED) {
								s5 = null;
							}
							if (s5 !== peg$FAILED) {
								s4 = [s4, s5];
								s3 = s4;
							}
							else {
								peg$currPos = s3;
								s3 = peg$FAILED;
							}
						}
						else {
							peg$currPos = s3;
							s3 = peg$FAILED;
						}
					}
					if (s2 !== peg$FAILED) {
						if (input.charCodeAt(peg$currPos) === 125) {
							s3 = peg$c110;
							peg$currPos++;
						}
						else {
							s3 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$c111);
							}
						}
						if (s3 !== peg$FAILED) {
							peg$savedPos = s0;
							s1 = peg$c112(s2);
							s0 = s1;
						}
						else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					}
					else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				}
				else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}

				return s0;
			}

			function peg$parseFieldReferenceCall() {
				var s0, s1;

				s0 = peg$currPos;
				s1 = peg$parseMethodName();
				if (s1 !== peg$FAILED) {
					peg$savedPos = s0;
					s1 = peg$c113(s1);
				}
				s0 = s1;

				return s0;
			}

			function peg$parseFieldReferenceReadWrite() {
				var s0, s1, s2;

				s0 = peg$currPos;
				s1 = peg$parseFieldName();
				if (s1 !== peg$FAILED) {
					if (input.charCodeAt(peg$currPos) === 58) {
						s2 = peg$c59;
						peg$currPos++;
					}
					else {
						s2 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c60);
						}
					}
					if (s2 !== peg$FAILED) {
						peg$savedPos = s0;
						s1 = peg$c114(s1);
						s0 = s1;
					}
					else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				}
				else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}

				return s0;
			}

			function peg$parseFieldReference() {
				var s0, s1, s2, s3;

				s0 = peg$currPos;
				s1 = peg$parseClass();
				if (s1 !== peg$FAILED) {
					if (input.substr(peg$currPos, 2) === peg$c115) {
						s2 = peg$c115;
						peg$currPos += 2;
					}
					else {
						s2 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c116);
						}
					}
					if (s2 !== peg$FAILED) {
						s3 = peg$parseFieldReferenceCall();
						if (s3 !== peg$FAILED) {
							peg$savedPos = s0;
							s1 = peg$c117(s1, s3);
							s0 = s1;
						}
						else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					}
					else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				}
				else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
				if (s0 === peg$FAILED) {
					s0 = peg$currPos;
					s1 = peg$parseClass();
					if (s1 !== peg$FAILED) {
						if (input.substr(peg$currPos, 2) === peg$c115) {
							s2 = peg$c115;
							peg$currPos += 2;
						}
						else {
							s2 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$c116);
							}
						}
						if (s2 !== peg$FAILED) {
							s3 = peg$parseFieldReferenceReadWrite();
							if (s3 !== peg$FAILED) {
								peg$savedPos = s0;
								s1 = peg$c118(s1, s3);
								s0 = s1;
							}
							else {
								peg$currPos = s0;
								s0 = peg$FAILED;
							}
						}
						else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					}
					else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				}

				return s0;
			}

			function peg$parseLocalVariableDeclaration() {
				var s0, s1, s2, s3;

				s0 = peg$currPos;
				s1 = peg$parseString();
				if (s1 !== peg$FAILED) {
					if (input.charCodeAt(peg$currPos) === 58) {
						s2 = peg$c59;
						peg$currPos++;
					}
					else {
						s2 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c60);
						}
					}
					if (s2 !== peg$FAILED) {
						s3 = peg$parseType();
						if (s3 !== peg$FAILED) {
							peg$savedPos = s0;
							s1 = peg$c119(s1, s3);
							s0 = s1;
						}
						else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					}
					else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				}
				else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}

				return s0;
			}

			function peg$parseMethodOperationPart() {
				var s0;

				s0 = peg$parseRegisterList();
				if (s0 === peg$FAILED) {
					s0 = peg$parseRegister();
					if (s0 === peg$FAILED) {
						s0 = peg$parseFieldReference();
						if (s0 === peg$FAILED) {
							s0 = peg$parsePart();
							if (s0 === peg$FAILED) {
								s0 = peg$parseLabel();
							}
						}
					}
				}

				return s0;
			}

			function peg$parseMethodOperationPartList() {
				var s0, s1, s2, s3, s4, s5, s6, s7;

				s0 = peg$currPos;
				s1 = [];
				s2 = peg$currPos;
				s3 = peg$parseMethodOperationPart();
				if (s3 !== peg$FAILED) {
					s4 = [];
					s5 = peg$currPos;
					if (input.charCodeAt(peg$currPos) === 44) {
						s6 = peg$c108;
						peg$currPos++;
					}
					else {
						s6 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c109);
						}
					}
					if (s6 !== peg$FAILED) {
						s7 = peg$parse_();
						if (s7 !== peg$FAILED) {
							s6 = [s6, s7];
							s5 = s6;
						}
						else {
							peg$currPos = s5;
							s5 = peg$FAILED;
						}
					}
					else {
						peg$currPos = s5;
						s5 = peg$FAILED;
					}
					while (s5 !== peg$FAILED) {
						s4.push(s5);
						s5 = peg$currPos;
						if (input.charCodeAt(peg$currPos) === 44) {
							s6 = peg$c108;
							peg$currPos++;
						}
						else {
							s6 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$c109);
							}
						}
						if (s6 !== peg$FAILED) {
							s7 = peg$parse_();
							if (s7 !== peg$FAILED) {
								s6 = [s6, s7];
								s5 = s6;
							}
							else {
								peg$currPos = s5;
								s5 = peg$FAILED;
							}
						}
						else {
							peg$currPos = s5;
							s5 = peg$FAILED;
						}
					}
					if (s4 !== peg$FAILED) {
						s3 = [s3, s4];
						s2 = s3;
					}
					else {
						peg$currPos = s2;
						s2 = peg$FAILED;
					}
				}
				else {
					peg$currPos = s2;
					s2 = peg$FAILED;
				}
				while (s2 !== peg$FAILED) {
					s1.push(s2);
					s2 = peg$currPos;
					s3 = peg$parseMethodOperationPart();
					if (s3 !== peg$FAILED) {
						s4 = [];
						s5 = peg$currPos;
						if (input.charCodeAt(peg$currPos) === 44) {
							s6 = peg$c108;
							peg$currPos++;
						}
						else {
							s6 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$c109);
							}
						}
						if (s6 !== peg$FAILED) {
							s7 = peg$parse_();
							if (s7 !== peg$FAILED) {
								s6 = [s6, s7];
								s5 = s6;
							}
							else {
								peg$currPos = s5;
								s5 = peg$FAILED;
							}
						}
						else {
							peg$currPos = s5;
							s5 = peg$FAILED;
						}
						while (s5 !== peg$FAILED) {
							s4.push(s5);
							s5 = peg$currPos;
							if (input.charCodeAt(peg$currPos) === 44) {
								s6 = peg$c108;
								peg$currPos++;
							}
							else {
								s6 = peg$FAILED;
								if (peg$silentFails === 0) {
									peg$fail(peg$c109);
								}
							}
							if (s6 !== peg$FAILED) {
								s7 = peg$parse_();
								if (s7 !== peg$FAILED) {
									s6 = [s6, s7];
									s5 = s6;
								}
								else {
									peg$currPos = s5;
									s5 = peg$FAILED;
								}
							}
							else {
								peg$currPos = s5;
								s5 = peg$FAILED;
							}
						}
						if (s4 !== peg$FAILED) {
							s3 = [s3, s4];
							s2 = s3;
						}
						else {
							peg$currPos = s2;
							s2 = peg$FAILED;
						}
					}
					else {
						peg$currPos = s2;
						s2 = peg$FAILED;
					}
				}
				if (s1 !== peg$FAILED) {
					peg$savedPos = s0;
					s1 = peg$c120(s1);
				}
				s0 = s1;

				return s0;
			}

			function peg$parseMethodOperation() {
				var s0, s1, s2, s3;

				s0 = peg$currPos;
				s1 = [];
				if (peg$c121.test(input.charAt(peg$currPos))) {
					s2 = input.charAt(peg$currPos);
					peg$currPos++;
				}
				else {
					s2 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c122);
					}
				}
				if (s2 !== peg$FAILED) {
					while (s2 !== peg$FAILED) {
						s1.push(s2);
						if (peg$c121.test(input.charAt(peg$currPos))) {
							s2 = input.charAt(peg$currPos);
							peg$currPos++;
						}
						else {
							s2 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$c122);
							}
						}
					}
				}
				else {
					s1 = peg$FAILED;
				}
				if (s1 !== peg$FAILED) {
					s2 = peg$parse_();
					if (s2 !== peg$FAILED) {
						s3 = peg$parseMethodOperationPartList();
						if (s3 !== peg$FAILED) {
							peg$savedPos = s0;
							s1 = peg$c123(s1, s3);
							s0 = s1;
						}
						else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					}
					else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				}
				else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}

				return s0;
			}

			function peg$parseMethodName() {
				var s0, s1, s2, s3, s4, s5, s6, s7;

				s0 = peg$currPos;
				if (input.charCodeAt(peg$currPos) === 60) {
					s1 = peg$c124;
					peg$currPos++;
				}
				else {
					s1 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c125);
					}
				}
				if (s1 === peg$FAILED) {
					s1 = null;
				}
				if (s1 !== peg$FAILED) {
					s2 = [];
					if (peg$c54.test(input.charAt(peg$currPos))) {
						s3 = input.charAt(peg$currPos);
						peg$currPos++;
					}
					else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c55);
						}
					}
					if (s3 !== peg$FAILED) {
						while (s3 !== peg$FAILED) {
							s2.push(s3);
							if (peg$c54.test(input.charAt(peg$currPos))) {
								s3 = input.charAt(peg$currPos);
								peg$currPos++;
							}
							else {
								s3 = peg$FAILED;
								if (peg$silentFails === 0) {
									peg$fail(peg$c55);
								}
							}
						}
					}
					else {
						s2 = peg$FAILED;
					}
					if (s2 !== peg$FAILED) {
						if (input.charCodeAt(peg$currPos) === 62) {
							s3 = peg$c126;
							peg$currPos++;
						}
						else {
							s3 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$c127);
							}
						}
						if (s3 === peg$FAILED) {
							s3 = null;
						}
						if (s3 !== peg$FAILED) {
							if (input.charCodeAt(peg$currPos) === 40) {
								s4 = peg$c128;
								peg$currPos++;
							}
							else {
								s4 = peg$FAILED;
								if (peg$silentFails === 0) {
									peg$fail(peg$c129);
								}
							}
							if (s4 !== peg$FAILED) {
								s5 = [];
								s6 = peg$parseArrayType();
								while (s6 !== peg$FAILED) {
									s5.push(s6);
									s6 = peg$parseArrayType();
								}
								if (s5 !== peg$FAILED) {
									if (input.charCodeAt(peg$currPos) === 41) {
										s6 = peg$c130;
										peg$currPos++;
									}
									else {
										s6 = peg$FAILED;
										if (peg$silentFails === 0) {
											peg$fail(peg$c131);
										}
									}
									if (s6 !== peg$FAILED) {
										s7 = peg$parseArrayType();
										if (s7 !== peg$FAILED) {
											peg$savedPos = s0;
											s1 = peg$c132(s1, s2, s5, s7);
											s0 = s1;
										}
										else {
											peg$currPos = s0;
											s0 = peg$FAILED;
										}
									}
									else {
										peg$currPos = s0;
										s0 = peg$FAILED;
									}
								}
								else {
									peg$currPos = s0;
									s0 = peg$FAILED;
								}
							}
							else {
								peg$currPos = s0;
								s0 = peg$FAILED;
							}
						}
						else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					}
					else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				}
				else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}

				return s0;
			}

			function peg$parseMethodStart() {
				var s0, s1, s2, s3, s4;

				s0 = peg$currPos;
				if (input.substr(peg$currPos, 7) === peg$c133) {
					s1 = peg$c133;
					peg$currPos += 7;
				}
				else {
					s1 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c134);
					}
				}
				if (s1 !== peg$FAILED) {
					s2 = peg$parse_();
					if (s2 !== peg$FAILED) {
						s3 = peg$parseVisiblityList();
						if (s3 !== peg$FAILED) {
							s4 = peg$parseMethodName();
							if (s4 !== peg$FAILED) {
								peg$savedPos = s0;
								s1 = peg$c135(s3, s4);
								s0 = s1;
							}
							else {
								peg$currPos = s0;
								s0 = peg$FAILED;
							}
						}
						else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					}
					else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				}
				else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}

				return s0;
			}

			function peg$parseMethodEnd() {
				var s0, s1, s2, s3;

				s0 = peg$currPos;
				if (input.substr(peg$currPos, 4) === peg$c41) {
					s1 = peg$c41;
					peg$currPos += 4;
				}
				else {
					s1 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c42);
					}
				}
				if (s1 !== peg$FAILED) {
					s2 = peg$parse_();
					if (s2 !== peg$FAILED) {
						if (input.substr(peg$currPos, 6) === peg$c136) {
							s3 = peg$c136;
							peg$currPos += 6;
						}
						else {
							s3 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$c137);
							}
						}
						if (s3 !== peg$FAILED) {
							s1 = [s1, s2, s3];
							s0 = s1;
						}
						else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					}
					else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				}
				else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}

				return s0;
			}

			function peg$parseMethodValue() {
				var s0;

				s0 = peg$parseMethodOperation();
				if (s0 === peg$FAILED) {
					s0 = peg$parseTerm();
					if (s0 === peg$FAILED) {
						s0 = peg$parseLabel();
					}
				}

				return s0;
			}

			function peg$parseMethod() {
				var s0, s1, s2, s3, s4, s5, s6;

				s0 = peg$currPos;
				s1 = peg$parseMethodStart();
				if (s1 !== peg$FAILED) {
					s2 = [];
					s3 = peg$parse_();
					if (s3 !== peg$FAILED) {
						while (s3 !== peg$FAILED) {
							s2.push(s3);
							s3 = peg$parse_();
						}
					}
					else {
						s2 = peg$FAILED;
					}
					if (s2 !== peg$FAILED) {
						s3 = [];
						s4 = peg$currPos;
						s5 = peg$parseMethodValue();
						if (s5 !== peg$FAILED) {
							s6 = peg$parse_();
							if (s6 === peg$FAILED) {
								s6 = null;
							}
							if (s6 !== peg$FAILED) {
								s5 = [s5, s6];
								s4 = s5;
							}
							else {
								peg$currPos = s4;
								s4 = peg$FAILED;
							}
						}
						else {
							peg$currPos = s4;
							s4 = peg$FAILED;
						}
						while (s4 !== peg$FAILED) {
							s3.push(s4);
							s4 = peg$currPos;
							s5 = peg$parseMethodValue();
							if (s5 !== peg$FAILED) {
								s6 = peg$parse_();
								if (s6 === peg$FAILED) {
									s6 = null;
								}
								if (s6 !== peg$FAILED) {
									s5 = [s5, s6];
									s4 = s5;
								}
								else {
									peg$currPos = s4;
									s4 = peg$FAILED;
								}
							}
							else {
								peg$currPos = s4;
								s4 = peg$FAILED;
							}
						}
						if (s3 !== peg$FAILED) {
							s4 = peg$parseMethodEnd();
							if (s4 !== peg$FAILED) {
								peg$savedPos = s0;
								s1 = peg$c138(s1, s3);
								s0 = s1;
							}
							else {
								peg$currPos = s0;
								s0 = peg$FAILED;
							}
						}
						else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					}
					else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				}
				else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}

				return s0;
			}

			function peg$parseComment() {
				var s0, s1, s2, s3;

				s0 = peg$currPos;
				if (input.charCodeAt(peg$currPos) === 35) {
					s1 = peg$c139;
					peg$currPos++;
				}
				else {
					s1 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c140);
					}
				}
				if (s1 !== peg$FAILED) {
					s2 = [];
					if (peg$c141.test(input.charAt(peg$currPos))) {
						s3 = input.charAt(peg$currPos);
						peg$currPos++;
					}
					else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c142);
						}
					}
					if (s3 !== peg$FAILED) {
						while (s3 !== peg$FAILED) {
							s2.push(s3);
							if (peg$c141.test(input.charAt(peg$currPos))) {
								s3 = input.charAt(peg$currPos);
								peg$currPos++;
							}
							else {
								s3 = peg$FAILED;
								if (peg$silentFails === 0) {
									peg$fail(peg$c142);
								}
							}
						}
					}
					else {
						s2 = peg$FAILED;
					}
					if (s2 !== peg$FAILED) {
						peg$savedPos = s0;
						s1 = peg$c143(s2);
						s0 = s1;
					}
					else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				}
				else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}

				return s0;
			}

			function peg$parseDirective() {
				var s0, s1, s2, s3, s4, s5;

				s0 = peg$parseAnnotation();
				if (s0 === peg$FAILED) {
					s0 = peg$parseField();
					if (s0 === peg$FAILED) {
						s0 = peg$parseMethod();
						if (s0 === peg$FAILED) {
							s0 = peg$currPos;
							if (input.charCodeAt(peg$currPos) === 46) {
								s1 = peg$c144;
								peg$currPos++;
							}
							else {
								s1 = peg$FAILED;
								if (peg$silentFails === 0) {
									peg$fail(peg$c145);
								}
							}
							if (s1 !== peg$FAILED) {
								s2 = peg$parseDeclaration();
								if (s2 !== peg$FAILED) {
									s3 = peg$parse_();
									if (s3 !== peg$FAILED) {
										s4 = peg$parseVisiblityList();
										if (s4 === peg$FAILED) {
											s4 = null;
										}
										if (s4 !== peg$FAILED) {
											s5 = peg$parsePartList();
											if (s5 === peg$FAILED) {
												s5 = null;
											}
											if (s5 !== peg$FAILED) {
												peg$savedPos = s0;
												s1 = peg$c146(s2, s4, s5);
												s0 = s1;
											}
											else {
												peg$currPos = s0;
												s0 = peg$FAILED;
											}
										}
										else {
											peg$currPos = s0;
											s0 = peg$FAILED;
										}
									}
									else {
										peg$currPos = s0;
										s0 = peg$FAILED;
									}
								}
								else {
									peg$currPos = s0;
									s0 = peg$FAILED;
								}
							}
							else {
								peg$currPos = s0;
								s0 = peg$FAILED;
							}
						}
					}
				}

				return s0;
			}

			function peg$parseClass() {
				var s0, s1, s2, s3;

				s0 = peg$currPos;
				if (input.charCodeAt(peg$currPos) === 76) {
					s1 = peg$c147;
					peg$currPos++;
				}
				else {
					s1 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c148);
					}
				}
				if (s1 !== peg$FAILED) {
					s2 = [];
					if (peg$c149.test(input.charAt(peg$currPos))) {
						s3 = input.charAt(peg$currPos);
						peg$currPos++;
					}
					else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c150);
						}
					}
					if (s3 !== peg$FAILED) {
						while (s3 !== peg$FAILED) {
							s2.push(s3);
							if (peg$c149.test(input.charAt(peg$currPos))) {
								s3 = input.charAt(peg$currPos);
								peg$currPos++;
							}
							else {
								s3 = peg$FAILED;
								if (peg$silentFails === 0) {
									peg$fail(peg$c150);
								}
							}
						}
					}
					else {
						s2 = peg$FAILED;
					}
					if (s2 !== peg$FAILED) {
						if (input.charCodeAt(peg$currPos) === 59) {
							s3 = peg$c151;
							peg$currPos++;
						}
						else {
							s3 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$c152);
							}
						}
						if (s3 !== peg$FAILED) {
							peg$savedPos = s0;
							s1 = peg$c153(s2);
							s0 = s1;
						}
						else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					}
					else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				}
				else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}

				return s0;
			}

			function peg$parseClassList() {
				var s0, s1, s2, s3, s4, s5, s6;

				s0 = [];
				s1 = peg$currPos;
				s2 = peg$parseClass();
				if (s2 !== peg$FAILED) {
					s3 = [];
					s4 = peg$currPos;
					if (input.charCodeAt(peg$currPos) === 44) {
						s5 = peg$c108;
						peg$currPos++;
					}
					else {
						s5 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c109);
						}
					}
					if (s5 !== peg$FAILED) {
						s6 = peg$parse_();
						if (s6 !== peg$FAILED) {
							s5 = [s5, s6];
							s4 = s5;
						}
						else {
							peg$currPos = s4;
							s4 = peg$FAILED;
						}
					}
					else {
						peg$currPos = s4;
						s4 = peg$FAILED;
					}
					while (s4 !== peg$FAILED) {
						s3.push(s4);
						s4 = peg$currPos;
						if (input.charCodeAt(peg$currPos) === 44) {
							s5 = peg$c108;
							peg$currPos++;
						}
						else {
							s5 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$c109);
							}
						}
						if (s5 !== peg$FAILED) {
							s6 = peg$parse_();
							if (s6 !== peg$FAILED) {
								s5 = [s5, s6];
								s4 = s5;
							}
							else {
								peg$currPos = s4;
								s4 = peg$FAILED;
							}
						}
						else {
							peg$currPos = s4;
							s4 = peg$FAILED;
						}
					}
					if (s3 !== peg$FAILED) {
						s2 = [s2, s3];
						s1 = s2;
					}
					else {
						peg$currPos = s1;
						s1 = peg$FAILED;
					}
				}
				else {
					peg$currPos = s1;
					s1 = peg$FAILED;
				}
				while (s1 !== peg$FAILED) {
					s0.push(s1);
					s1 = peg$currPos;
					s2 = peg$parseClass();
					if (s2 !== peg$FAILED) {
						s3 = [];
						s4 = peg$currPos;
						if (input.charCodeAt(peg$currPos) === 44) {
							s5 = peg$c108;
							peg$currPos++;
						}
						else {
							s5 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$c109);
							}
						}
						if (s5 !== peg$FAILED) {
							s6 = peg$parse_();
							if (s6 !== peg$FAILED) {
								s5 = [s5, s6];
								s4 = s5;
							}
							else {
								peg$currPos = s4;
								s4 = peg$FAILED;
							}
						}
						else {
							peg$currPos = s4;
							s4 = peg$FAILED;
						}
						while (s4 !== peg$FAILED) {
							s3.push(s4);
							s4 = peg$currPos;
							if (input.charCodeAt(peg$currPos) === 44) {
								s5 = peg$c108;
								peg$currPos++;
							}
							else {
								s5 = peg$FAILED;
								if (peg$silentFails === 0) {
									peg$fail(peg$c109);
								}
							}
							if (s5 !== peg$FAILED) {
								s6 = peg$parse_();
								if (s6 !== peg$FAILED) {
									s5 = [s5, s6];
									s4 = s5;
								}
								else {
									peg$currPos = s4;
									s4 = peg$FAILED;
								}
							}
							else {
								peg$currPos = s4;
								s4 = peg$FAILED;
							}
						}
						if (s3 !== peg$FAILED) {
							s2 = [s2, s3];
							s1 = s2;
						}
						else {
							peg$currPos = s1;
							s1 = peg$FAILED;
						}
					}
					else {
						peg$currPos = s1;
						s1 = peg$FAILED;
					}
				}

				return s0;
			}

			function peg$parseVisiblity() {
				var s0, s1;

				s0 = peg$currPos;
				if (input.substr(peg$currPos, 6) === peg$c154) {
					s1 = peg$c154;
					peg$currPos += 6;
				}
				else {
					s1 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c155);
					}
				}
				if (s1 !== peg$FAILED) {
					peg$savedPos = s0;
					s1 = peg$c156();
				}
				s0 = s1;
				if (s0 === peg$FAILED) {
					s0 = peg$currPos;
					if (input.substr(peg$currPos, 7) === peg$c157) {
						s1 = peg$c157;
						peg$currPos += 7;
					}
					else {
						s1 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c158);
						}
					}
					if (s1 !== peg$FAILED) {
						peg$savedPos = s0;
						s1 = peg$c156();
					}
					s0 = s1;
					if (s0 === peg$FAILED) {
						s0 = peg$currPos;
						if (input.substr(peg$currPos, 9) === peg$c159) {
							s1 = peg$c159;
							peg$currPos += 9;
						}
						else {
							s1 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$c160);
							}
						}
						if (s1 !== peg$FAILED) {
							peg$savedPos = s0;
							s1 = peg$c156();
						}
						s0 = s1;
						if (s0 === peg$FAILED) {
							s0 = peg$currPos;
							if (input.substr(peg$currPos, 8) === peg$c161) {
								s1 = peg$c161;
								peg$currPos += 8;
							}
							else {
								s1 = peg$FAILED;
								if (peg$silentFails === 0) {
									peg$fail(peg$c162);
								}
							}
							if (s1 !== peg$FAILED) {
								peg$savedPos = s0;
								s1 = peg$c156();
							}
							s0 = s1;
							if (s0 === peg$FAILED) {
								s0 = peg$currPos;
								if (input.substr(peg$currPos, 6) === peg$c163) {
									s1 = peg$c163;
									peg$currPos += 6;
								}
								else {
									s1 = peg$FAILED;
									if (peg$silentFails === 0) {
										peg$fail(peg$c164);
									}
								}
								if (s1 !== peg$FAILED) {
									peg$savedPos = s0;
									s1 = peg$c156();
								}
								s0 = s1;
								if (s0 === peg$FAILED) {
									s0 = peg$currPos;
									if (input.substr(peg$currPos, 11) === peg$c165) {
										s1 = peg$c165;
										peg$currPos += 11;
									}
									else {
										s1 = peg$FAILED;
										if (peg$silentFails === 0) {
											peg$fail(peg$c166);
										}
									}
									if (s1 !== peg$FAILED) {
										peg$savedPos = s0;
										s1 = peg$c156();
									}
									s0 = s1;
									if (s0 === peg$FAILED) {
										s0 = peg$currPos;
										if (input.substr(peg$currPos, 5) === peg$c167) {
											s1 = peg$c167;
											peg$currPos += 5;
										}
										else {
											s1 = peg$FAILED;
											if (peg$silentFails === 0) {
												peg$fail(peg$c168);
											}
										}
										if (s1 !== peg$FAILED) {
											peg$savedPos = s0;
											s1 = peg$c156();
										}
										s0 = s1;
										if (s0 === peg$FAILED) {
											s0 = peg$currPos;
											if (input.substr(peg$currPos, 6) === peg$c169) {
												s1 = peg$c169;
												peg$currPos += 6;
											}
											else {
												s1 = peg$FAILED;
												if (peg$silentFails === 0) {
													peg$fail(peg$c170);
												}
											}
											if (s1 !== peg$FAILED) {
												peg$savedPos = s0;
												s1 = peg$c156();
											}
											s0 = s1;
											if (s0 === peg$FAILED) {
												s0 = peg$currPos;
												if (input.substr(peg$currPos, 6) === peg$c171) {
													s1 = peg$c171;
													peg$currPos += 6;
												}
												else {
													s1 = peg$FAILED;
													if (peg$silentFails === 0) {
														peg$fail(peg$c172);
													}
												}
												if (s1 !== peg$FAILED) {
													peg$savedPos = s0;
													s1 = peg$c156();
												}
												s0 = s1;
												if (s0 === peg$FAILED) {
													s0 = peg$currPos;
													if (input.substr(peg$currPos, 9) === peg$c173) {
														s1 = peg$c173;
														peg$currPos += 9;
													}
													else {
														s1 = peg$FAILED;
														if (peg$silentFails === 0) {
															peg$fail(peg$c174);
														}
													}
													if (s1 !== peg$FAILED) {
														peg$savedPos = s0;
														s1 = peg$c156();
													}
													s0 = s1;
													if (s0 === peg$FAILED) {
														s0 = peg$currPos;
														if (input.substr(peg$currPos, 7) === peg$c175) {
															s1 = peg$c175;
															peg$currPos += 7;
														}
														else {
															s1 = peg$FAILED;
															if (peg$silentFails === 0) {
																peg$fail(peg$c176);
															}
														}
														if (s1 !== peg$FAILED) {
															peg$savedPos = s0;
															s1 = peg$c156();
														}
														s0 = s1;
														if (s0 === peg$FAILED) {
															s0 = peg$currPos;
															if (input.substr(peg$currPos, 21) === peg$c177) {
																s1 = peg$c177;
																peg$currPos += 21;
															}
															else {
																s1 = peg$FAILED;
																if (peg$silentFails === 0) {
																	peg$fail(peg$c178);
																}
															}
															if (s1 !== peg$FAILED) {
																peg$savedPos = s0;
																s1 = peg$c156();
															}
															s0 = s1;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}

				return s0;
			}

			function peg$parseVisiblityList() {
				var s0, s1, s2, s3, s4, s5;

				s0 = peg$currPos;
				s1 = [];
				s2 = peg$currPos;
				s3 = peg$parseVisiblity();
				if (s3 !== peg$FAILED) {
					s4 = [];
					s5 = peg$parse_();
					while (s5 !== peg$FAILED) {
						s4.push(s5);
						s5 = peg$parse_();
					}
					if (s4 !== peg$FAILED) {
						s3 = [s3, s4];
						s2 = s3;
					}
					else {
						peg$currPos = s2;
						s2 = peg$FAILED;
					}
				}
				else {
					peg$currPos = s2;
					s2 = peg$FAILED;
				}
				while (s2 !== peg$FAILED) {
					s1.push(s2);
					s2 = peg$currPos;
					s3 = peg$parseVisiblity();
					if (s3 !== peg$FAILED) {
						s4 = [];
						s5 = peg$parse_();
						while (s5 !== peg$FAILED) {
							s4.push(s5);
							s5 = peg$parse_();
						}
						if (s4 !== peg$FAILED) {
							s3 = [s3, s4];
							s2 = s3;
						}
						else {
							peg$currPos = s2;
							s2 = peg$FAILED;
						}
					}
					else {
						peg$currPos = s2;
						s2 = peg$FAILED;
					}
				}
				if (s1 !== peg$FAILED) {
					peg$savedPos = s0;
					s1 = peg$c37(s1);
				}
				s0 = s1;

				return s0;
			}

			function peg$parse_() {
				var s0, s1, s2;

				s0 = peg$currPos;
				s1 = [];
				if (peg$c179.test(input.charAt(peg$currPos))) {
					s2 = input.charAt(peg$currPos);
					peg$currPos++;
				}
				else {
					s2 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c180);
					}
				}
				if (s2 !== peg$FAILED) {
					while (s2 !== peg$FAILED) {
						s1.push(s2);
						if (peg$c179.test(input.charAt(peg$currPos))) {
							s2 = input.charAt(peg$currPos);
							peg$currPos++;
						}
						else {
							s2 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$c180);
							}
						}
					}
				}
				else {
					s1 = peg$FAILED;
				}
				if (s1 !== peg$FAILED) {
					peg$savedPos = s0;
					s1 = peg$c181();
				}
				s0 = s1;

				return s0;
			}

			peg$result = peg$startRuleFunction();

			if (peg$result !== peg$FAILED && peg$currPos === input.length) {
				return peg$result;
			}
			else {
				if (peg$result !== peg$FAILED && peg$currPos < input.length) {
					peg$fail(peg$endExpectation());
				}

				throw peg$buildStructuredError(
					peg$maxFailExpected,
					peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
					peg$maxFailPos < input.length ?
					peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) :
					peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
				);
			}
		}

		return {
			SyntaxError: peg$SyntaxError,
			parse: peg$parse
		};
	})();
